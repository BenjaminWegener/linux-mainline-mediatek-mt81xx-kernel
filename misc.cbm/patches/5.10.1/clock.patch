diff --git a/drivers/clk/clk.c b/drivers/clk/clk.c
index f83dac54e..d90a0539b 100644
--- a/drivers/clk/clk.c
+++ b/drivers/clk/clk.c
@@ -64,6 +64,7 @@ struct clk_core {
 	struct clk_parent_map	*parents;
 	u8			num_parents;
 	u8			new_parent_index;
+	u8			default_parent_index;
 	unsigned long		rate;
 	unsigned long		req_rate;
 	unsigned long		new_rate;
@@ -1741,6 +1742,9 @@ static void clk_reparent(struct clk_core *core, struct clk_core *new_parent)
 	}
 
 	core->parent = new_parent;
+	if (!strcmp(core->name, "mfg_sel"))
+		pr_info("%s:%i clk %s new parent %s\n", __func__, __LINE__,
+			core->name, core->new_parent ? core->new_parent->name : "null");
 }
 
 static struct clk_core *__clk_set_parent_before(struct clk_core *core,
@@ -2053,6 +2057,11 @@ static void clk_change_rate(struct clk_core *core)
 		best_parent_rate = core->parent->rate;
 	}
 
+	if (!strcmp(core->name, "mfg_sel"))
+		pr_info("%s:%i clk %s reparent from %s to %s\n", __func__, __LINE__,
+			core->name, core->parent ? core->parent->name : "null",
+			core->new_parent ? core->new_parent->name : "null");
+
 	if (clk_pm_runtime_get(core))
 		return;
 
@@ -2065,6 +2074,15 @@ static void clk_change_rate(struct clk_core *core)
 		clk_enable_unlock(flags);
 	}
 
+	hlist_for_each_entry(child, &core->children, child_node) {
+		if (child->ops->pre_parent_set_rate)
+			child->ops->pre_parent_set_rate(child->hw);
+	}
+
+	if (!strcmp(core->name, "mfg_sel"))
+		pr_info("%s:%i clk %s reparent from %s to %s\n", __func__, __LINE__,
+			core->name, core->parent ? core->parent->name : "null",
+			core->new_parent ? core->new_parent->name : "null");
 	if (core->new_parent && core->new_parent != core->parent) {
 		old_parent = __clk_set_parent_before(core, core->new_parent);
 		trace_clk_set_parent(core, core->new_parent);
@@ -2080,6 +2098,10 @@ static void clk_change_rate(struct clk_core *core)
 
 		trace_clk_set_parent_complete(core, core->new_parent);
 		__clk_set_parent_after(core, core->new_parent, old_parent);
+		if (!strcmp(core->name, "mfg_sel"))
+			pr_info("%s:%i clk %s reparent from %s to %s\n", __func__, __LINE__,
+				core->name, core->parent ? core->parent->name : "null",
+				core->new_parent ? core->new_parent->name : "null");
 	}
 
 	if (core->flags & CLK_OPS_PARENT_ENABLE)
@@ -2090,6 +2112,11 @@ static void clk_change_rate(struct clk_core *core)
 	if (!skip_set_rate && core->ops->set_rate)
 		core->ops->set_rate(core->hw, core->new_rate, best_parent_rate);
 
+	hlist_for_each_entry(child, &core->children, child_node) {
+		if (child->ops->post_parent_set_rate)
+			child->ops->post_parent_set_rate(child->hw);
+	}
+
 	trace_clk_set_rate_complete(core, core->new_rate);
 
 	core->rate = clk_recalc(core, best_parent_rate);
@@ -3694,6 +3721,10 @@ static int clk_core_populate_parent_map(struct clk_core *core,
 	int i, ret = 0;
 	struct clk_parent_map *parents, *parent;
 
+	if ((init->flags & CLK_REPARENT_ON_LIVE_RATE_CHANGE) &&
+	    init->default_parent >= num_parents)
+		return -EINVAL;
+
 	if (!num_parents)
 		return 0;
 
@@ -3743,6 +3774,9 @@ static int clk_core_populate_parent_map(struct clk_core *core,
 		}
 	}
 
+	if (init->flags & CLK_REPARENT_ON_LIVE_RATE_CHANGE)
+		core->default_parent_index = init->default_parent;
+
 	return 0;
 }
 
diff --git a/drivers/clk/mediatek/clk-mt8183.c b/drivers/clk/mediatek/clk-mt8183.c
index 5046852eb..453f51ee6 100644
--- a/drivers/clk/mediatek/clk-mt8183.c
+++ b/drivers/clk/mediatek/clk-mt8183.c
@@ -548,9 +548,10 @@ static const struct mtk_mux top_muxes[] = {
 		ipu_if_parents, 0x50,
 		0x54, 0x58, 24, 4, 31, 0x004, 7),
 	/* CLK_CFG_2 */
-	MUX_GATE_CLR_SET_UPD(CLK_TOP_MUX_MFG, "mfg_sel",
-		mfg_parents, 0x60,
-		0x64, 0x68, 0, 2, 7, 0x004, 8),
+	GATE_CLR_SET_UPD_FLAGS(CLK_TOP_MUX_MFG, "mfg_sel",
+			       mfg_parents, 0x60,
+			       0x64, 0x68, 0, 2, 7, 0x004, 8, 0,
+			       mtk_mfg_sel_ops),
 	MUX_GATE_CLR_SET_UPD(CLK_TOP_MUX_F52M_MFG, "f52m_mfg_sel",
 		f52m_mfg_parents, 0x60,
 		0x64, 0x68, 8, 2, 15, 0x004, 9),
diff --git a/drivers/clk/mediatek/clk-mux.c b/drivers/clk/mediatek/clk-mux.c
index 14e127e9a..e3ac4d4f6 100644
--- a/drivers/clk/mediatek/clk-mux.c
+++ b/drivers/clk/mediatek/clk-mux.c
@@ -155,6 +155,46 @@ const struct clk_ops mtk_mux_gate_clr_set_upd_ops = {
 	.set_parent = mtk_clk_mux_set_parent_setclr_lock,
 };
 
+static void mtk_clk_mfg_sel_pre_parent_set_rate(struct clk_hw *hw)
+{
+	unsigned parent_idx = clk_hw_get_parent_index(hw);
+
+	pr_info("%s:%i\n", __func__, __LINE__);
+	/*
+	 * If the clk is running, reparent the clk to the 26MHz oscillator
+	 * before the parent rate change happens to avoid glitches.
+	 */
+	if (clk_hw_is_enabled(hw) && parent_idx != 0) {
+		mtk_clk_mux_set_parent_setclr_lock(hw, 0);
+		pr_info("%s:%i parent %d -> %d\n", __func__, __LINE__, parent_idx, 0);
+	}
+}
+
+static void mtk_clk_mfg_sel_post_parent_set_rate(struct clk_hw *hw)
+{
+	unsigned parent_idx = clk_hw_get_parent_index(hw);
+
+	pr_info("%s:%i\n", __func__, __LINE__);
+	/*
+	 * Reparent the clk to the actual parent when the parent is done
+	 * changing its rate.
+	 */
+	if (parent_idx != mtk_clk_mux_get_parent(hw)) {
+		pr_info("%s:%i parent %d -> %d\n", __func__, __LINE__, mtk_clk_mux_get_parent(hw), parent_idx);
+		mtk_clk_mux_set_parent_setclr_lock(hw, parent_idx);
+	}
+}
+
+const struct clk_ops mtk_mfg_sel_ops = {
+	.enable = mtk_clk_mux_enable_setclr,
+	.disable = mtk_clk_mux_disable_setclr,
+	.is_enabled = mtk_clk_mux_is_enabled,
+	.get_parent = mtk_clk_mux_get_parent,
+	.set_parent = mtk_clk_mux_set_parent_setclr_lock,
+	.pre_parent_set_rate = mtk_clk_mfg_sel_pre_parent_set_rate,
+	.post_parent_set_rate = mtk_clk_mfg_sel_post_parent_set_rate,
+};
+
 struct clk *mtk_clk_register_mux(const struct mtk_mux *mux,
 				 struct regmap *regmap,
 				 spinlock_t *lock)
diff --git a/drivers/clk/mediatek/clk-mux.h b/drivers/clk/mediatek/clk-mux.h
index f5625f4d9..1ad62381b 100644
--- a/drivers/clk/mediatek/clk-mux.h
+++ b/drivers/clk/mediatek/clk-mux.h
@@ -41,6 +41,7 @@ extern const struct clk_ops mtk_mux_ops;
 extern const struct clk_ops mtk_mux_clr_set_upd_ops;
 extern const struct clk_ops mtk_mux_gate_ops;
 extern const struct clk_ops mtk_mux_gate_clr_set_upd_ops;
+extern const struct clk_ops mtk_mfg_sel_ops;
 
 #define GATE_CLR_SET_UPD_FLAGS(_id, _name, _parents, _mux_ofs,		\
 			_mux_set_ofs, _mux_clr_ofs, _shift, _width,	\
diff --git a/include/linux/clk-provider.h b/include/linux/clk-provider.h
index 03a5de5f9..69c4e4953 100644
--- a/include/linux/clk-provider.h
+++ b/include/linux/clk-provider.h
@@ -32,6 +32,13 @@
 #define CLK_OPS_PARENT_ENABLE	BIT(12)
 /* duty cycle call may be forwarded to the parent clock */
 #define CLK_DUTY_CYCLE_PARENT	BIT(13)
+/*
+ * some clocks need to be updated without gating everything, but changing those
+ * clocks (especially PLLs), means the blocks using them get interrupted, which
+ * is sometimes not acceptable. Add a flag to reparent before changing the
+ * parent rate.
+ */
+#define CLK_REPARENT_ON_LIVE_RATE_CHANGE	BIT(14)
 
 struct clk;
 struct clk_hw;
@@ -236,6 +243,8 @@ struct clk_ops {
 					  struct clk_rate_request *req);
 	int		(*set_parent)(struct clk_hw *hw, u8 index);
 	u8		(*get_parent)(struct clk_hw *hw);
+	void		(*pre_parent_set_rate)(struct clk_hw *hw);
+	void		(*post_parent_set_rate)(struct clk_hw *hw);
 	int		(*set_rate)(struct clk_hw *hw, unsigned long rate,
 				    unsigned long parent_rate);
 	int		(*set_rate_and_parent)(struct clk_hw *hw,
@@ -280,6 +289,7 @@ struct clk_parent_data {
  * @parent_hws: array of pointers to all possible parents (when all parents
  *              are internal to the clk controller)
  * @num_parents: number of possible parents
+ * @default_parent: parent used when a live rate change is requested
  * @flags: framework-level hints and quirks
  */
 struct clk_init_data {
@@ -290,6 +300,7 @@ struct clk_init_data {
 	const struct clk_parent_data	*parent_data;
 	const struct clk_hw		**parent_hws;
 	u8			num_parents;
+	u8			default_parent;
 	unsigned long		flags;
 };
 
