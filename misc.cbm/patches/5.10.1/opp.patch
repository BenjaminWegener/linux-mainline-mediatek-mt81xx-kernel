diff --git a/drivers/opp/core.c b/drivers/opp/core.c
index 0e0a5269d..667767504 100644
--- a/drivers/opp/core.c
+++ b/drivers/opp/core.c
@@ -668,23 +668,28 @@ static int _generic_set_opp_regulator(struct opp_table *opp_table,
 				      struct device *dev,
 				      unsigned long old_freq,
 				      unsigned long freq,
-				      struct dev_pm_opp_supply *old_supply,
-				      struct dev_pm_opp_supply *new_supply)
+				      struct dev_pm_opp_supply *old_supplies,
+				      struct dev_pm_opp_supply *new_supplies)
 {
+	unsigned i;
 	struct regulator *reg = opp_table->regulators[0];
 	int ret;
 
-	/* This function only supports single regulator per device */
+	/* This function only supports single regulator per device
 	if (WARN_ON(opp_table->regulator_count > 1)) {
 		dev_err(dev, "multiple regulators are not supported\n");
 		return -EINVAL;
-	}
+	} */
+
 
 	/* Scaling up? Scale voltage before frequency */
 	if (freq >= old_freq) {
-		ret = _set_opp_voltage(dev, reg, new_supply);
-		if (ret)
-			goto restore_voltage;
+		for (i = 0; i < opp_table->regulator_count; i++) {
+			ret = _set_opp_voltage(dev, opp_table->regulators[i],
+					       &new_supplies[i]);
+			if (ret)
+				goto restore_voltage;
+		}
 	}
 
 	/* Change frequency */
@@ -694,9 +699,12 @@ static int _generic_set_opp_regulator(struct opp_table *opp_table,
 
 	/* Scaling down? Scale voltage after frequency */
 	if (freq < old_freq) {
-		ret = _set_opp_voltage(dev, reg, new_supply);
-		if (ret)
-			goto restore_freq;
+		for (i = 0; i < opp_table->regulator_count; i++) {
+			ret = _set_opp_voltage(dev, opp_table->regulators[i],
+					       &new_supplies[i]);
+			if (ret)
+				goto restore_freq;
+		}
 	}
 
 	/*
@@ -717,8 +725,11 @@ static int _generic_set_opp_regulator(struct opp_table *opp_table,
 			__func__, old_freq);
 restore_voltage:
 	/* This shouldn't harm even if the voltages weren't updated earlier */
-	if (old_supply)
-		_set_opp_voltage(dev, reg, old_supply);
+	if (old_supplies) {
+		for (i = 0; i < opp_table->regulator_count; i++)
+			_set_opp_voltage(dev, opp_table->regulators[i],
+					 &old_supplies[i]);
+	}
 
 	return ret;
 }
@@ -1734,6 +1745,25 @@ static void _free_set_opp_data(struct opp_table *opp_table)
 	opp_table->set_opp_data = NULL;
 }
 
+struct opp_table *dev_pm_opp_use_regulators(struct device *dev,
+					    struct regulator **regulators,
+					    unsigned int count)
+{
+	struct opp_table *opp_table;
+
+	if (count && !regulators)
+		return ERR_PTR(-EINVAL);
+
+	opp_table = dev_pm_opp_get_opp_table(dev);
+	if (!opp_table)
+		return ERR_PTR(-ENOMEM);
+
+	opp_table->regulators = regulators;
+	opp_table->regulator_count = count;
+	return opp_table;
+}
+EXPORT_SYMBOL_GPL(dev_pm_opp_use_regulators);
+
 /**
  * dev_pm_opp_set_regulators() - Set regulator names for the device
  * @dev: Device for which regulator name is being set.
@@ -2021,6 +2051,9 @@ struct opp_table *dev_pm_opp_attach_genpd(struct device *dev,
 	if (opp_table->genpd_virt_devs)
 		return opp_table;
 
+	if (opp_table->genpd_virt_devs)
+		return opp_table;
+
 	/*
 	 * If the genpd's OPP table isn't already initialized, parsing of the
 	 * required-opps fail for dev. We should retry this after genpd's OPP
diff --git a/include/linux/pm_opp.h b/include/linux/pm_opp.h
index dbb484524..359d7f690 100644
--- a/include/linux/pm_opp.h
+++ b/include/linux/pm_opp.h
@@ -142,6 +142,9 @@ struct opp_table *dev_pm_opp_set_supported_hw(struct device *dev, const u32 *ver
 void dev_pm_opp_put_supported_hw(struct opp_table *opp_table);
 struct opp_table *dev_pm_opp_set_prop_name(struct device *dev, const char *name);
 void dev_pm_opp_put_prop_name(struct opp_table *opp_table);
+struct opp_table *dev_pm_opp_use_regulators(struct device *dev,
+                                            struct regulator **regulators,
+                                            unsigned int count);
 struct opp_table *dev_pm_opp_set_regulators(struct device *dev, const char * const names[], unsigned int count);
 void dev_pm_opp_put_regulators(struct opp_table *opp_table);
 struct opp_table *dev_pm_opp_set_clkname(struct device *dev, const char * name);
