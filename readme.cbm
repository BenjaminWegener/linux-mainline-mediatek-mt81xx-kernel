# directories:
# - /compile/doc/stable-mt - the files in this dir
# - /compile/source/linux-stable-mt - the kernel sources checked out from gitrepo
# - /compile/result/stable-mt - the resulting kernel, modules etc. tar.gz files
# name: stb-cbm

# IMPORTANT: this is work in progress and not yet ready to use!
# status: 5.10.1 works with wayland andl latest mali, xorg does not work
          5.10.15 does not work - black screen
# credits go to https://gitlab.freedesktop.org/icecream95/duet-kernel.git
#        and to https://github.com/Maccraft123/Cadmium.git

# patches:
# the version patched up to 5.10.15 did not work - just a black screen on boot
#for i in /compile/doc/stable-mt/misc.cbm/patches/5.10.15/*.patch; do
for i in /compile/doc/stable-mt/misc.cbm/patches/5.10.1/*.patch; do
  echo === $i
  patch -p1 < $i
done

# in case of using the alpine elm patches, the above patches were not applied but those
#patch -p1 < /compile/doc/stable-mt/misc.cbm/patches/alpine/fix-mmc1-speed.patch
#patch -p1 < /compile/doc/stable-mt/misc.cbm/patches/alpine/fix-mmc-order.patch
#patch -p1 < /compile/doc/stable-mt/misc.cbm/patches/alpine/fix-spi-nor-max-frequency.patch

cp /compile/doc/stable-mt/config.cbm /compile/source/linux-stable-mt/.config
cd /compile/source/linux-stable-mt

export ARCH=arm64
# no defconfig yet - a special config is used for now ... no: make defconfig
# /compile/doc/stable-mt/misc.cbm/options/enable-docker-options.sh
# /compile/doc/stable-mt/misc.cbm/options/enable-additional-options.sh
make oldconfig
make -j 4 Image dtbs modules
cd tools/perf
make
cd ../power/cpupower
make
cd ../../..
export kver=`make kernelrelease`
echo ${kver}
# remove debug info if there and not wanted
#find . -type f -name '*.ko' | sudo xargs -n 1 objcopy --strip-unneeded
make modules_install
mkdir -p /lib/modules/${kver}/tools
cp -v tools/perf/perf /lib/modules/${kver}/tools
cp -v tools/power/cpupower/cpupower /lib/modules/${kver}/tools
cp -v tools/power/cpupower/libcpupower.so.0.0.1 /lib/modules/${kver}/tools/libcpupower.so.0
# make headers_install INSTALL_HDR_PATH=/usr
cp -v .config /boot/config-${kver}
cp -v arch/arm64/boot/Image /boot/Image-${kver}
mkdir -p /boot/dtb-${kver}
cp -v arch/arm64/boot/dts/mediatek/mt81*.dtb /boot/dtb-${kver}
cp -v System.map /boot/System.map-${kver}
# start chromebook special - required: apt-get install vboot-kernel-utils
cp /compile/doc/stable-mt/misc.cbm/misc/krane-kernel.its kernel.its
cp /compile/doc/stable-mt/misc.cbm/misc/krane-cmdline cmdline
mkimage -D "-I dts -O dtb -p 2048" -f kernel.its vmlinux.uimg || true
dd if=/dev/zero of=bootloader.bin bs=512 count=1
vbutil_kernel --pack vmlinux.kpart --version 1 --vmlinuz vmlinux.uimg --arch aarch64 --keyblock /usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --config cmdline --bootloader bootloader.bin
cp -v vmlinux.kpart /boot/vmlinux.kpart-krane-${kver}
rm -f kernel.its cmdline vmlinux.uimg bootloader.bin vmlinux.kpart
cp /compile/doc/stable-mt/misc.cbm/misc/elm-kernel.its kernel.its
cp /compile/doc/stable-mt/misc.cbm/misc/elm-cmdline cmdline
mkimage -D "-I dts -O dtb -p 2048" -f kernel.its vmlinux.uimg || true
dd if=/dev/zero of=bootloader.bin bs=512 count=1
vbutil_kernel --pack vmlinux.kpart --version 1 --vmlinuz vmlinux.uimg --arch aarch64 --keyblock /usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --config cmdline --bootloader bootloader.bin
cp -v vmlinux.kpart /boot/vmlinux.kpart-elm-${kver}
rm -f kernel.its cmdline vmlinux.uimg bootloader.bin vmlinux.kpart
# end chromebook special
cd /boot
update-initramfs -c -k ${kver}
#mkimage -A arm64 -O linux -T ramdisk -a 0x0 -e 0x0 -n initrd.img-${kver} -d initrd.img-${kver} uInitrd-${kver}
tar cvzf /compile/source/linux-stable-mt/${kver}.tar.gz /boot/*-${kver} /lib/modules/${kver}
cp -v /compile/doc/stable-mt/config.cbm /compile/doc/stable-mt/config.cbm.old
cp -v /compile/source/linux-stable-mt/.config /compile/doc/stable-mt/config.cbm
cp -v /compile/source/linux-stable-mt/.config /compile/doc/stable-mt/config.cbm-${kver}
cp -v /compile/source/linux-stable-mt/*.tar.gz /compile/result/stable-mt


# alternative chromebook specific approach for the alipine kernel experiments
# start chromebook special - required: apt-get install liblz4-tool vboot-kernel-utils
cp arch/arm64/boot/Image Image
lz4 -f Image Image.lz4
cp /compile/doc/stable-mt/misc.cbm/misc/alpine/cmdline cmdline
dd if=/dev/zero of=bootloader.bin bs=512 count=1
mkimage -D "-I dts -O dtb -p 2048" -f auto -A arm64 -O linux -T kernel -C lz4 -a 0 -d Image.lz4 -b arch/arm64/boot/dts/mediatek/mt8173-elm.dtb -b arch/arm64/boot/dts/mediatek/mt8173-elm-hana.dtb -b arch/arm64/boot/dts/mediatek/mt8173-elm-hana-rev7.dtb -b arch/arm64/boot/dts/mediatek/mt8183-kukui-krane-sku176.dtb kernel.itb
vbutil_kernel --pack vmlinux.kpart --keyblock /usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --version 1 --config cmdline --bootloader bootloader.bin --vmlinuz kernel.itb --arch arm
cp -v vmlinux.kpart /boot/vmlinux.kpart-${kver}
rm -f Image Image.lz4 cmdline bootloader.bin kernel.itb vmlinux.kpart
# end chromebook special
