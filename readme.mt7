# directories:
# - /compile/doc/stable-mt - the files in this dir
# - /compile/source/linux-stable-mt - the kernel sources checked out from gitrepo
# - /compile/result/stable-mt - the resulting kernel, modules etc. tar.gz files
# name: stb-mt7

# INFO this is for the elm chromebook, i.e. the acer r13 chromebook and it
#      might also work on the rk3399 based gru bob and gru kevin chromebooks
# status: 5.10.20 works without an accelerated gpu driver (which will most
#         probably never happen as there is no info about the powervr gpu)
#         most of the rest seems to work well (cpu, wifi, webcam, dvfs, thermal, ...)

# patches for elm:
# use a patch which removes even more high speed mmc modes as otherwise it gave errors for me
#patch -p1 < /compile/doc/stable-mt/misc.mt7/patches/fix-mmc1-speed.patch
patch -p1 < /compile/doc/stable-mt/misc.mt7/patches/fix-mmc1-speed-reworked.patch
patch -p1 < /compile/doc/stable-mt/misc.mt7/patches/fix-mmc-order.patch
# do not use this one - this gave spi-nor errors for me
#patch -p1 < /compile/doc/stable-mt/misc.mt7/patches/fix-spi-nor-max-frequency.patch
patch -p1 < /compile/doc/stable-mt/misc.mt7/patches/higher-temps.patch

cp /compile/doc/stable-mt/config.mt7 /compile/source/linux-stable-mt/.config
cd /compile/source/linux-stable-mt

export ARCH=arm64
make defconfig
/compile/doc/stable-mt/misc.mt7/options/enable-docker-options.sh
/compile/doc/stable-mt/misc.mt7/options/enable-additional-options.sh
#/compile/doc/stable-mt/misc.mt7/options/remove-unused-options.sh
make oldconfig
make -j 4 Image dtbs modules
cd tools/perf
make
cd ../power/cpupower
make
cd ../../..
export kver=`make kernelrelease`
echo ${kver}
# remove debug info if there and not wanted
#find . -type f -name '*.ko' | sudo xargs -n 1 objcopy --strip-unneeded
make modules_install
mkdir -p /lib/modules/${kver}/tools
cp -v tools/perf/perf /lib/modules/${kver}/tools
cp -v tools/power/cpupower/cpupower /lib/modules/${kver}/tools
cp -v tools/power/cpupower/libcpupower.so.0.0.1 /lib/modules/${kver}/tools/libcpupower.so.0
# make headers_install INSTALL_HDR_PATH=/usr
cp -v .config /boot/config-${kver}
cp -v arch/arm64/boot/Image /boot/Image-${kver}
mkdir -p /boot/dtb-${kver}
cp -v arch/arm64/boot/dts/mediatek/mt81*.dtb /boot/dtb-${kver}
cp -v System.map /boot/System.map-${kver}
# start chromebook special - required: apt-get install liblz4-tool vboot-kernel-utils
cp arch/arm64/boot/Image Image
lz4 -f Image Image.lz4
dd if=/dev/zero of=bootloader.bin bs=512 count=1
cp /compile/doc/stable-mt/misc.mt7/misc/cmdline.elm cmdline
mkimage -D "-I dts -O dtb -p 2048" -f auto -A arm64 -O linux -T kernel -C lz4 -a 0 -d Image.lz4 -b arch/arm64/boot/dts/mediatek/mt8173-elm.dtb -b arch/arm64/boot/dts/mediatek/mt8173-elm-hana.dtb -b arch/arm64/boot/dts/mediatek/mt8173-elm-hana-rev7.dtb -b arch/arm64/boot/dts/mediatek/mt8183-kukui-krane-sku176.dtb -b arch/arm64/boot/dts/rockchip/rk3399-gru-bob.dtb -b arch/arm64/boot/dts/rockchip/rk3399-gru-kevin.dtb kernel.itb
vbutil_kernel --pack vmlinux.kpart --keyblock /usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --version 1 --config cmdline --bootloader bootloader.bin --vmlinuz kernel.itb --arch arm
cp -v vmlinux.kpart /boot/vmlinux.kpart-elm-${kver}
cp /compile/doc/stable-mt/misc.mt7/misc/cmdline.krane cmdline
mkimage -D "-I dts -O dtb -p 2048" -f auto -A arm64 -O linux -T kernel -C lz4 -a 0 -d Image.lz4 -b arch/arm64/boot/dts/mediatek/mt8173-elm.dtb -b arch/arm64/boot/dts/mediatek/mt8173-elm-hana.dtb -b arch/arm64/boot/dts/mediatek/mt8173-elm-hana-rev7.dtb -b arch/arm64/boot/dts/mediatek/mt8183-kukui-krane-sku176.dtb -b arch/arm64/boot/dts/rockchip/rk3399-gru-bob.dtb -b arch/arm64/boot/dts/rockchip/rk3399-gru-kevin.dtb kernel.itb
vbutil_kernel --pack vmlinux.kpart --keyblock /usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --version 1 --config cmdline --bootloader bootloader.bin --vmlinuz kernel.itb --arch arm
cp -v vmlinux.kpart /boot/vmlinux.kpart-krane-${kver}
rm -f Image Image.lz4 cmdline bootloader.bin kernel.itb vmlinux.kpart
# end chromebook special
cd /boot
update-initramfs -c -k ${kver}
#mkimage -A arm64 -O linux -T ramdisk -a 0x0 -e 0x0 -n initrd.img-${kver} -d initrd.img-${kver} uInitrd-${kver}
tar cvzf /compile/source/linux-stable-mt/${kver}.tar.gz /boot/*-${kver} /lib/modules/${kver}
cp -v /compile/doc/stable-mt/config.mt7 /compile/doc/stable-mt/config.mt7.old
cp -v /compile/source/linux-stable-mt/.config /compile/doc/stable-mt/config.mt7
cp -v /compile/source/linux-stable-mt/.config /compile/doc/stable-mt/config.mt7-${kver}
cp -v /compile/source/linux-stable-mt/*.tar.gz /compile/result/stable-mt
